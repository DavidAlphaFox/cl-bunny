(in-package :cl-bunny.test)

(plan 1)

(subtest "Basic.ack tests"
  (subtest "Acknowledges a message with a valid (known) delivery tag"
    (with-connection ()
      (with-channel ()
        (let ((q (queue.declare :name "cl-bunny.basic.ack.manual-acks" :exclusive t))
              (x (exchange.default)))
          (publish x "bunneth" :routing-key q)
          (sleep 0.5)
          (is (queue.message-count q) 1)
          (let ((message (queue.get)))
            (isnt message nil)
            (message.ack message))))
      (with-channel ()
        (let ((q (queue.declare :name "cl-bunny.basic.ack.manual-acks" :exclusive t)))
          (is (queue.message-count q) 0)))))

  (subtest "Acknowledge multiple messages with a valid (known) delivery tag"
    (with-connection ()
      (with-channel ()
        (let ((q (queue.declare :name "cl-bunny.basic.ack.manual-acks" :exclusive t))
              (x (exchange.default)))
          (publish x "bunneth" :routing-key q)
          (publish x "bunneth" :routing-key q)
          (sleep 0.5)
          (is (queue.message-count q) 2)
          (queue.get)
          (let ((message (queue.get)))
            (isnt message nil)
            (message.ack message :multiple t))))
      (with-channel ()
        (let ((q (queue.declare :name "cl-bunny.basic.ack.manual-acks" :exclusive t)))
          (is (queue.message-count q) 0)))))
  
  (subtest "Acknowledges a message with a valid (known) delivery tag (:multiple nil)"
    (with-connection ()
      (with-channel ()
        (let ((q (queue.declare :name "cl-bunny.basic.ack.manual-acks" :exclusive t))
              (x (exchange.default)))
          (publish x "bunneth" :routing-key q)
          (publish x "bunneth" :routing-key q)
          (sleep 0.5)
          (is (queue.message-count q) 2)
          (queue.get)
          (let ((message (queue.get)))
            (isnt message nil)
            (message.ack message))))
      (with-channel ()
        (let ((q (queue.declare :name "cl-bunny.basic.ack.manual-acks" :exclusive t)))
          (is (queue.message-count q) 1)))))

  (subtest "Acknowledges a messages with a valid (known) delivery tag and auto-ack"
    (with-connection ()
      (with-channel ()
        (let ((q (queue.declare :name "cl-bunny.basic.ack.manual-acks" :exclusive t))
              (x (exchange.default)))
          (subscribe-sync q :no-ack t)
          (publish x "bunneth" :routing-key q)
          (let ((message (consume :one-shot t)))
            (isnt message nil "message received")
            (message.ack message :multiple t))
          (sleep 1)
          (is-error (queue.message-count q) 'channel-closed-error "causes a channel-level error")
          (is (channel-open-p) nil "channel closed")))))
  
  (subtest "Acknowledges a message with a invalid (random) delivery tag"
    (with-connection ()
      (with-channel ()
        (let ((q (queue.declare :name "cl-bunny.basic.ack.unknown-delivery-tag" :exclusive t))
              (x (exchange.default)))
          (publish x "bunneth" :routing-key q)
          (sleep 0.5)
          (is (queue.message-count q) 1)
          (let ((error))
            (setf (channel-on-error-callback)
                  (lambda (e)
                    (setf error e)))
            
            (let ((message (queue.get)))
              (isnt message nil)
              (message.ack 82 :multiple t))
            (sleep 1)
            (is-type error 'amqp:amqp-error-precondition-failed)))))))

(finalize)
