(in-package :cl-bunny)

(defstruct (int-allocator (:constructor make-int-allocator%))
  (bits)
  (min)
  (max))

(defun make-int-allocator (&key min max)
  (assert (> max min))
  (let ((bits (make-array (1+ (- max min)) :element-type 'bit)))
    (make-int-allocator% :bits bits :min min :max max)))

(defun int-allocator-set% (bits i)
  (declare (optimize (speed 3) (safety 0) (debug 0))
           (type bit-vector bits)
           (type fixnum i))
  (setf (bit bits i) 1))

(defun int-allocator-unset% (bits i)
  (declare (optimize (speed 3) (safety 0) (debug 0))
           (type bit-vector bits)
           (type fixnum i))
  (setf (bit bits i) 0))

(defun int-allocator-isset% (bits i)
  (declare (optimize (speed 3) (safety 0) (debug 0))
           (type bit-vector bits)
           (type fixnum i))
  (= (bit bits i) 1))

(defun int-allocator-allocate% (bits min)
  (declare (optimize (speed 3) (safety 0) (debug 0))
           (type bit-vector bits)
           (type fixnum min))
  (loop for i from 0 below (length bits)
        when (zerop (bit bits i))
        return (progn
                 (int-allocator-set% bits i)
                 (+ min i))))

(defun int-allocator-allocate (int-allocator)
  (let ((bits (int-allocator-bits int-allocator))
        (min (int-allocator-min int-allocator)))
    (int-allocator-allocate% bits min)))

(defun int-allocator-release (int-allocator allocated)
  (let ((bits (int-allocator-bits int-allocator))
        (min (int-allocator-min int-allocator))
        (max (int-allocator-max int-allocator)))    
    (assert (and (>= allocated min) (<= allocated max)))
    (int-allocator-unset% bits (- allocated min))))

(defun int-allocator-allocated-p (int-allocator value)
  (let ((bits (int-allocator-bits int-allocator))
        (min (int-allocator-min int-allocator))
        (max (int-allocator-max int-allocator)))    
    (assert (and (>= value min) (<= value max)))
    (int-allocator-set% bits (- value min))))
